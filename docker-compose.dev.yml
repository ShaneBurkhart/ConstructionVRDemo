version: "3.9"

services: 
    websocket:
        image: shaneburkhart/finish-vision-web
        networks: [ pg, redis, next ]
        volumes:
            - ./packages/next:/app
            - ./packages/tailwind:/tailwind
        env_file:
            - user.env
        command: "npm run dev"

    tailwind:
        image: shaneburkhart/finish-vision-tailwind
        volumes: [ ./packages/tailwind:/app, ./packages/web/react:/react ]
        env_file: [ user.env ]
        tty: true
        command: "npm start"

    pg:
        image: postgres:10
        networks: [ pg ]
        # ports:
            # - "5432:5432"
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=mydb
        volumes:
            - ./data/pg:/var/lib/postgresql/data

    redis:
        image: redis:3.2
        networks: [ redis ]
        command: "redis-server --save '' --appendonly no"

    split_pdf:
        image: shaneburkhart/finish-vision-lambda
        volumes: [ ./packages/lambda:/var/task ]
        networks: [ split_pdf, next, lambda_queue_proxy ]
        env_file: [ user.env ]
        command: "split_pdf.split"

    pdf_to_image:
        image: shaneburkhart/finish-vision-lambda
        networks: [ pdf_to_image, next, lambda_queue_proxy ]
        env_file: [ user.env ]
        volumes: [ ./packages/lambda:/var/task ]
        command: "pdf_to_image.to_image"

    lambda_queue_processor:
        image: shaneburkhart/finish-vision-lambda-queue
        volumes: [ ./packages/lambda-queue:/app ]
        networks: [ split_pdf, pdf_to_image, redis ]
        depends_on: [ redis ]
        env_file: [ user.env ]
        command: "node -e \"const queue = require('./queue.js'); queue.startProcessors();\""

    lambda_queue_proxy:
        image: shaneburkhart/finish-vision-lambda-queue
        volumes: [ ./packages/lambda-queue:/app ]
        networks: [ redis, lambda_queue_proxy ]
        depends_on: [ redis ]
        env_file: [ user.env ]
        command: "node -e \"const queue = require('./queue.js'); queue.startServer();\""

    nginx:
        image: nginx:1.17
        ports:
            - "3000:3000"
        restart: always
        volumes:
            - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
        networks: [ next ]

    networks:
        next:
        lambda_queue_proxy:
        redis:
        pg:
        split_pdf:
        pdf_to_image:
