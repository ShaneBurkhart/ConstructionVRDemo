%script(src="/underscore.js")
%script(src="/script.js?v=190429")

= haml :_project_header, locals: { page: "renderings", project: project, access_token: access_token }

.large-container
  %p.breadcrumb
    %a{ href: "/project/#{access_token}" } Back to all Units

- if is_admin_mode
  .admin-section
    .large-container
      %p.breadcrumb
        %a{ href: "/project/#{access_token}/unit/#{unit.id}/feedback_feed" } Go to Feedback Feed

      %p.breadcrumb
        - if unit["Hidden?"]
          %span.bold Only Admins can see this unit.
          %a{ href: "/project/#{access_token}/unit/#{unit.id}/set_visibility?hidden=0" }
            Make Visible to Everyone
        - else
          %span.bold Everyone can see this unit.
          %a{ href: "/project/#{access_token}/unit/#{unit.id}/set_visibility?hidden=1" }
            Hide Unit

      %p
        Version:
        %select#unit-version.ui.dropdown
          - unit_versions.each do |uv|
            - label = Time.parse(uv["Created At"]).strftime('%b %e, %Y')
            - label += " (Current)" if uv.id == unit["Current Version"][0]
            - label += " (Errors)" if uv.has_errors?
            - label += " (Rendering)" if uv.is_rendering?
            %option{ value: "#{uv.id}" }= label
        :javascript
          $('#unit-version.ui.dropdown').dropdown("set selected", "#{@version_id}")
            .dropdown({
              onChange: function(val) {
                console.log(val);
                location.href = "?version=" + val;
              }
            });

        - if selected_version.id != unit["Current Version"][0]
          %a.button{ href: "/project/#{access_token}/unit/#{unit.id}/set_current_version?uv_id=#{selected_version.id}" } Make Current Version

.large-container
  #rendering-viewer
  :javascript
    var _accessToken = "#{access_token}";
    var _unitVersionId = "#{@version_id}";

    var _isDebugMode = #{is_debug_mode};
    var AWS_IDENTITY_POOL_ID = "#{aws_identity_pool_id}";

    var DATA = {
      admin_mode: #{is_admin_mode},
      unit_version_id: "#{@version_id}",
      unit: #{unit.fields.to_json},
      pano_data: #{unit_pano_data.to_json},
      image_data: #{unit_image_data.to_json},
      feedbacks: #{feedbacks.map{ |f| f.fields }.to_json},

      //var _unitVersionId = "#{@version_id}";
      //var _accessToken = "#{access_token}";
      //var _isDebugMode = #{is_debug_mode};
      //var AWS_IDENTITY_POOL_ID = "#{aws_identity_pool_id}";
    };
  %script(src="/dist/rendering_viewer.js?v=062120-01")

  - if !is_tour
  - else
    #virtual-tour
      #pano-previews.pano-previews
        - unit_pano_data.each do |pano|
          .pano-preview{ data: { id: pano["Pano ID"][0] }}
            .name= pano["Pano Name"][0]

      #pano-window
        - if is_debug_mode
          .debug-center-window
        .controls
          - if is_admin_mode and is_latest_version
            %a.feedback-toggle Give Feedback
          %a.fullscreen-toggle Exit
        - if is_admin_mode and is_latest_version
          .fullscreen-feedback
            .container{ style: "height: 100%; position: relative;" }
              %textarea#fullscreen-feedback-input{ placeholder: "Enter your feedback here..." }
              .button-wrapper
                %button.feedback-add-file#fullscreen-feedback-add-file Add File
                %button#fullscreen-feedback-submit Submit Feedback

      - if is_admin_mode and is_latest_version
        %textarea#feedback-input{ name: "notes", placeholder: "Enter your feedback here..." }
        %input{id: "feedback-is-fix", type: "checkbox", name: "is-fix", checked: true } Fix?
        %br
        %button.feedback-add-file#feedback-add-file Add File
        %button#feedback-submit Submit Feedback

        %br
        %br

        %h2 Recent Feedback
        #feedbacks
          #feedback-template{ style: "display: none;" }
            .feedback
              %p
                %strong.pano_name
                %span.created_at
              .show-notes
                %a.feedback-image{ target: "_blank" }
                  %img{ style: "width: 300px;" }
                .notes
                .break
                %p
                  %a.edit-feedback{ href: "#" } Edit
              .edit-notes{ style: "display: none;" }
                %textarea.notes-input
                %button.update-feedback Update
                %a.cancel-update-feedback{ href: "#" } Cancel

          - feedbacks.each do |feedback|
            %hr
            .feedback{ data: { feedback_id: feedback.id } }
              %p
                %a.perspective-link{ href: "#", data: { "pano-version-id": feedback["Pano Version"].first, perspective: feedback["View Parameters"] } }
                  %strong.unit_name>= feedback["Pano Name"].first
                %span.created_at= "(#{Time.parse(feedback['Created At']).strftime('%b %e, %Y %l:%M%P')})"
              .show-notes
                - if !feedback["Screenshot"].nil?
                  %a.feedback-image{ href: feedback["Screenshot"][0]["url"], target: "_blank" }
                    %img{ src: feedback["Screenshot"][0]["url"], style: "width: 300px;" }
                .notes= feedback.notes_html
                .break
                %p
                  %a.edit-feedback{ href: "#" } Edit
              .edit-notes{ style: "display: none;" }
                %textarea.notes-input= feedback["Notes"]
                %button.update-feedback Update
                %a.cancel-update-feedback{ href: "#" } Cancel

      %input#feedback-file-upload.hidden{ type: "file", name: "feedback-file-upload", accept: "image/*" }

- if is_admin_mode
  :javascript
    $(document).ready(function () {
      var $editDescription = $(".edit-description");

      $editDescription.click(function (e) {
        var $this = $(this);
        e.preventDefault();

        var newDesc = prompt("What should the description for the unit say?", ($this.data("description") || "").replace(/\n/, "|"));

        window.location.href = window.location.pathname + "/set_description?description=" + newDesc;
      });
    });

- if is_debug_mode
  :javascript
    $(document).ready(function () {
      var $unitFloorPlan = $("#unit-floor-plan img");

      $unitFloorPlan.click(function (e) {
        var $this = $(this);
        var pageX = e.pageX;
        var pageY = e.pageY;
        var offset = $this.offset();
        var width = $this.width();
        var height = $this.height();

        var percentX = 100 * (pageX - offset.left) / width;
        var percentY = 100 * (pageY - offset.top) / height;

        console.log(percentX + "\t" + percentY);
      });
    });

:javascript
  var _panoData = #{unit_pano_data.to_json};
  var _unitVersionId = "#{@version_id}";
  var _accessToken = "#{access_token}";
  var _isDebugMode = #{is_debug_mode};
  var AWS_IDENTITY_POOL_ID = "#{aws_identity_pool_id}";
