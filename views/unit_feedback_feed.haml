%script(src="/underscore.js")

.large-container
  %h1 #{unit["Name"]} - Feedback Feed

  %a{ href: "/project/#{access_token}/unit/#{unit["Record ID"]}" } Go to Unit Viewer

  %hr

  - versions.each_with_index do |version, i|
    - total_completed = version.total_completed
    - total_to_complete = version.total_to_complete
    - version_class = ""

    - if version.has_errors?
      - version_class = "errors"
    - elsif version.is_rendering?
      - version_class = "rendering"
    - elsif total_completed >= total_to_complete and total_to_complete > 0
      - version_class = "completed"

    .version-wrapper{ class: version_class }
      %header
        %h3 V#{versions.length - i}
        %p.created_at= Time.parse(version["Created At"]).strftime('%b %e, %Y %l:%M%P')
        %p.to_complete
          - if version.has_errors?
            Has Errors
          - else
            - if total_to_complete <= 0
              No Feedback
            - else
              = "#{total_completed} / #{total_to_complete} Completed"

        %a.toggle-visible{ href: "#" } Expand

      .version-feedbacks-wrapper{ style: "display: none;" }
        - if version.has_errors?
          .feedback-feed-item
            - version["Errors"].split("\n").each do |error|
              - next if error.nil? or !error.length
              %p= error

        - version.feedbacks.each do |f|
          - item_class = !f["Is Fix"] || (f["Is Fix"] && !f["Fixed At"].nil?) ? "completed" : ""
          .feedback-feed-item{ class: item_class }
            - if !f["Screenshot"].nil?
              %a.feedback-image{ href: f["Screenshot"][0]["url"], target: "_blank" }
                %img{ src: f["Screenshot"][0]["url"], style: "width: 300px;" }

            %h4= f["Pano Name"].first

            %p.created_at= Time.parse(f["Created At"]).strftime('%b %e, %Y %l:%M%P')
            - if f["Is Fix"]
              %a.is-complete{ href: "#", data: { feedback_id: f.id } }
                - if f["Fixed At"].nil?
                  Mark as Complete
                - else
                  Completed!

            %p= f.notes_html
            .break



:javascript
  $(document).ready(function () {
    var _accessToken = "#{access_token}";

    var $feedbackIsFixeds = $(".feedback-feed-item .is-complete");

    $(".toggle-visible").click(function (e) {
        e.preventDefault();
        var $this = $(this);

        $this.parent().parent().find(".version-feedbacks-wrapper").toggle();
        $this.text($this.text() == "Expand" ? "Collapse" : "Expand");
    });

    var updateDB = _.debounce(function (feedbackId, data) {
      $.ajax({
        type: "POST",
        url: "/project/" + _accessToken + "/feedback_feed/" + feedbackId + "/update",
        data: data,
      });
    }, 750);

    $feedbackIsFixeds.click(function (e) {
      e.preventDefault();
      var $this = $(this);
      var feedbackId = $this.data("feedback-id");
      var wasChecked = $this.text().trim() != "Mark as Complete";
      var $feedbackItemsWrapper = $this.parent().parent();

      if (wasChecked) {
        $this.parent().removeClass("completed");
        $feedbackItemsWrapper.parent().removeClass("completed");
        $this.text("Mark as Complete");
      } else {
        $this.parent().addClass("completed");
        $this.text("Completed!");
      }

      // Update the version counter and completed class.
      var $feedbackItems = $feedbackItemsWrapper.find(".feedback-feed-item");
      var $completedFeedbackItems = $feedbackItemsWrapper.find(".feedback-feed-item.completed");
      var $versionWrapper = $feedbackItemsWrapper.parent();
      var items = $feedbackItems.length;
      var completedItems = $completedFeedbackItems.length;

      $versionWrapper.find(".to_complete").text(completedItems + " / " + items + " Completed");
      if ($feedbackItems.length <= $completedFeedbackItems.length) {
        $versionWrapper.addClass("completed");
      }

      var checked = wasChecked == true ? "unchecked" : "checked"
      updateDB(feedbackId, { checked: checked });
    });
  });
